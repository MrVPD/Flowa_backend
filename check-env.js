// Script ki·ªÉm tra c·∫•u h√¨nh .env
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';

// Load .env file
dotenv.config();

console.log('===== KI·ªÇM TRA BI·∫æN M√îI TR∆Ø·ªúNG =====');

// Ki·ªÉm tra c√≥ t·ªìn t·∫°i .env file kh√¥ng
if (fs.existsSync(path.resolve(process.cwd(), '.env'))) {
  console.log('‚úÖ T√¨m th·∫•y file .env');
  
  // ƒê·ªçc n·ªôi dung file .env
  const envContent = fs.readFileSync(path.resolve(process.cwd(), '.env'), 'utf8');
  const envLines = envContent.split('\n').filter(line => line.trim() !== '');
  
  console.log(`üìù File .env c√≥ ${envLines.length} d√≤ng c·∫•u h√¨nh`);
} else {
  console.error('‚ùå KH√îNG t√¨m th·∫•y file .env! Vui l√≤ng t·∫°o file .env t·ª´ .env.example');
}

// Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng quan tr·ªçng
const requiredVars = [
  { key: 'PORT', default: '5000' },
  { key: 'MONGODB_URI', description: 'ƒê∆∞·ªùng d·∫´n k·∫øt n·ªëi MongoDB' },
  { key: 'JWT_SECRET', description: 'M√£ b·∫£o m·∫≠t ƒë·ªÉ t·∫°o JWT token' },
  { key: 'NODE_ENV', default: 'development' },
  { key: 'GOOGLE_CLIENT_ID', description: 'Client ID x√°c th·ª±c Google' },
  { key: 'EMAIL_HOST', default: 'smtp.gmail.com' },
  { key: 'EMAIL_PORT', default: '587' },
  { key: 'EMAIL_SECURE', default: 'false' },
  { key: 'EMAIL_USER', description: 'Email d√πng ƒë·ªÉ g·ª≠i th√¥ng b√°o' },
  { key: 'EMAIL_PASS', description: 'App Password cho email' },
  { key: 'EMAIL_FROM', description: 'Email "From" header' },
  { key: 'FRONTEND_URL', default: 'http://localhost:3000' }
];

console.log('\n----- Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng quan tr·ªçng -----');

let missingVars = 0;
for (const v of requiredVars) {
  const value = process.env[v.key];
  
  if (!value) {
    console.error(`‚ùå ${v.key}: KH√îNG t√¨m th·∫•y!${v.description ? ' - ' + v.description : ''}${v.default ? ' (m·∫∑c ƒë·ªãnh: ' + v.default + ')' : ''}`);
    missingVars++;
  } else {
    // Ch·ªâ hi·ªÉn th·ªã m·ªôt ph·∫ßn gi√° tr·ªã n·∫øu l√† secret
    const isSecret = v.key.includes('SECRET') || v.key.includes('PASS') || v.key.includes('URI');
    const displayValue = isSecret ? '******' : value;
    console.log(`‚úÖ ${v.key}: ${displayValue}`);
  }
}

console.log('\n===== K·∫æT QU·∫¢ KI·ªÇM TRA =====');
if (missingVars > 0) {
  console.error(`‚ùå Ph√°t hi·ªán ${missingVars} bi·∫øn m√¥i tr∆∞·ªùng b·ªã thi·∫øu. Vui l√≤ng c·∫≠p nh·∫≠t file .env!`);
} else {
  console.log('‚úÖ T·∫•t c·∫£ c√°c bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh!');
}

// Ki·ªÉm tra App Password
if (process.env.EMAIL_PASS && process.env.EMAIL_PASS.includes(' ')) {
  console.error('‚ùå EMAIL_PASS ch·ª©a kho·∫£ng tr·∫Øng - App Password kh√¥ng ƒë∆∞·ª£c c√≥ kho·∫£ng tr·∫Øng!');
}

// Ki·ªÉm tra JWT_SECRET
if (process.env.JWT_SECRET && (process.env.JWT_SECRET.length < 10 || /^(your|my|test)/.test(process.env.JWT_SECRET))) {
  console.warn('‚ö†Ô∏è JWT_SECRET c√≥ v·∫ª qu√° ƒë∆°n gi·∫£n ho·∫∑c l√† gi√° tr·ªã m·∫∑c ƒë·ªãnh. N√™n s·ª≠ d·ª•ng m·ªôt chu·ªói ng·∫´u nhi√™n ph·ª©c t·∫°p!');
}

// Ki·ªÉm tra GOOGLE_CLIENT_ID format
if (process.env.GOOGLE_CLIENT_ID && !process.env.GOOGLE_CLIENT_ID.endsWith('.apps.googleusercontent.com')) {
  console.warn('‚ö†Ô∏è GOOGLE_CLIENT_ID kh√¥ng ƒë√∫ng format (ph·∫£i k·∫øt th√∫c b·∫±ng .apps.googleusercontent.com)');
}

console.log('\nHo√†n t·∫•t ki·ªÉm tra. Ch·∫°y "npm run dev" ƒë·ªÉ kh·ªüi ƒë·ªông server.'); 